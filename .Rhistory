temp = gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start <=  hdd4_lfmm.sig$position[i] &
stop >= hdd4_lfmm.sig$position[i]
]
#check if there is a matching gene. If not go to next
if(nrow(temp) == 1){
gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start <=  hdd4_lfmm.sig$position[i] &
stop >= hdd4_lfmm.sig$position[i],
sig_SNP_count.hdd4 := sig_SNP_count.hdd4 + 1
] #strict search only finds 34 SNPs on genes out of 182
hdd4_lfmm.sig$found[i] = "yes"
}else{
temp2 = gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start-1000 <=  hdd4_lfmm.sig$position[i] &
stop+1000 >= hdd4_lfmm.sig$position[i]
] #adds in 1Kb up or downstream.
if(nrow(temp2) > 0){
print(nrow(temp2))
gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start-1000 <=  hdd4_lfmm.sig$position[i] &
stop+1000 >= hdd4_lfmm.sig$position[i],
sig_SNP_count.hdd4 := sig_SNP_count.hdd4 + 1
] #adds in 1Kb up or downstream.
hdd4_lfmm.sig$found[i] = "1Kb"
}else{
hdd4_lfmm.sig$found[i] = "no"
}
}
}
sum(gff.dt$sig_SNP_count.hdd4)
hdd4_lfmm.sig[hdd4_lfmm.sig$found == "yes",] |> nrow()
hdd4_lfmm.sig[hdd4_lfmm.sig$found == "1Kb",] |> nrow()
34+28
hdd4_lfmm.sig |> nrow
hdd4_lfmm.sig |> nrow()
gff$sig_SNP_count.hdd4 = rep(0, nrow(gff))
hdd4_lfmm.sig$found = vector(mode = "character", length = nrow(hdd4_lfmm.sig))
#set data.table
gff.dt = as.data.table(gff)
gff$sig_SNP_count.hdd4 = rep(0, nrow(gff))
hdd4_lfmm.sig$found = vector(mode = "character", length = nrow(hdd4_lfmm.sig))
#set data.table
gff.dt = as.data.table(gff)
else{
#The nested ifs are UGLY. should probably write a function
for(i in 1:nrow(hdd4_lfmm.sig)){
temp = gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start <=  hdd4_lfmm.sig$position[i] &
stop >= hdd4_lfmm.sig$position[i]
]
#check if there is a matching gene. If not go to next
if(nrow(temp) == 1){
gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start <=  hdd4_lfmm.sig$position[i] &
stop >= hdd4_lfmm.sig$position[i],
sig_SNP_count.hdd4 := sig_SNP_count.hdd4 + 1
] #strict search only finds 34 SNPs on genes out of 182
hdd4_lfmm.sig$found[i] = "yes"
}else{
temp2 = gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start-500 <=  hdd4_lfmm.sig$position[i] &
stop+500 >= hdd4_lfmm.sig$position[i]
] #adds in 0.5Kb up or downstream.
if(nrow(temp2) == 1){
print(nrow(temp2))
gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start-500 <=  hdd4_lfmm.sig$position[i] &
stop+500 >= hdd4_lfmm.sig$position[i],
sig_SNP_count.hdd4 := sig_SNP_count.hdd4 + 1
] #adds in 0.5 Kb up or downstream.
hdd4_lfmm.sig$found[i] = "500b"
}else{
temp2 = gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start-1000 <=  hdd4_lfmm.sig$position[i] &
stop+1000 >= hdd4_lfmm.sig$position[i]
] #adds in 0.5Kb up or downstream.
if(nrow(temp2) == 1){
print(nrow(temp2))
gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start-1000 <=  hdd4_lfmm.sig$position[i] &
stop+1000 >= hdd4_lfmm.sig$position[i],
sig_SNP_count.hdd4 := sig_SNP_count.hdd4 + 1
] #adds in 0.5 Kb up or downstream.
hdd4_lfmm.sig$found[i] = "1Kb"
}else{
temp2 = gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start-1500 <=  hdd4_lfmm.sig$position[i] &
stop+1500 >= hdd4_lfmm.sig$position[i]
] #adds in 0.5Kb up or downstream.
if(nrow(temp2) == 1){
print(nrow(temp2))
gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start-1500 <=  hdd4_lfmm.sig$position[i] &
stop+1500 >= hdd4_lfmm.sig$position[i],
sig_SNP_count.hdd4 := sig_SNP_count.hdd4 + 1
] #adds in 0.5 Kb up or downstream.
hdd4_lfmm.sig$found[i] = "1.5Kb"
}else{
temp2 = gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start-1000 <=  hdd4_lfmm.sig$position[i] &
stop+1000 >= hdd4_lfmm.sig$position[i]
] #adds in 0.5Kb up or downstream.
if(nrow(temp2) > 0){
print(nrow(temp2))
gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start-1000 <=  hdd4_lfmm.sig$position[i] &
stop+1000 >= hdd4_lfmm.sig$position[i],
sig_SNP_count.hdd4 := sig_SNP_count.hdd4 + 1
] #adds in 0.5 Kb up or downstream.
hdd4_lfmm.sig$found[i] = "1KbMult"
}else{
hdd4_lfmm.sig$found[i] = "no"
}
}
}
}
}
}
sum(gff.dt$sig_SNP_count.hdd4)
hdd4_lfmm.sig[hdd4_lfmm.sig$found == "yes",] |> nrow()
hdd4_lfmm.sig[hdd4_lfmm.sig$found == "500b",] |> nrow()
hdd4_lfmm.sig[hdd4_lfmm.sig$found == "1Kb",] |> nrow()
hdd4_lfmm.sig[hdd4_lfmm.sig$found == "1.5Kb",] |> nrow()
hdd4_lfmm.sig[hdd4_lfmm.sig$found == "11KbMult",] |> nrow()
hdd4_lfmm.sig[hdd4_lfmm.sig$found == "11KbMult",] |> nrow()
hdd4_lfmm.sig |> nrow()
hdd4_lfmm.sig[hdd4_lfmm.sig$found == "1KbMult",] |> nrow()
gff$sig_SNP_count.hdd4 = rep(0, nrow(gff))
hdd4_lfmm.sig$found = vector(mode = "character", length = nrow(hdd4_lfmm.sig))
#set data.table
gff.dt = as.data.table(gff)
#The nested ifs are UGLY. should probably write a function
for(i in 1:nrow(hdd4_lfmm.sig)){
temp = gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start <=  hdd4_lfmm.sig$position[i] &
stop >= hdd4_lfmm.sig$position[i]
]
#check if there is a matching gene. If not go to next
if(nrow(temp) == 1){
gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start <=  hdd4_lfmm.sig$position[i] &
stop >= hdd4_lfmm.sig$position[i],
sig_SNP_count.hdd4 := sig_SNP_count.hdd4 + 1
] #strict search only finds 34 SNPs on genes out of 182
hdd4_lfmm.sig$found[i] = "yes"
}else{
temp2 = gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start-500 <=  hdd4_lfmm.sig$position[i] &
stop+500 >= hdd4_lfmm.sig$position[i]
] #adds in 0.5Kb up or downstream.
if(nrow(temp2) == 1){
print(nrow(temp2))
gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start-500 <=  hdd4_lfmm.sig$position[i] &
stop+500 >= hdd4_lfmm.sig$position[i],
sig_SNP_count.hdd4 := sig_SNP_count.hdd4 + 1
] #adds in 0.5 Kb up or downstream.
hdd4_lfmm.sig$found[i] = "500b"
}else{
temp2 = gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start-1000 <=  hdd4_lfmm.sig$position[i] &
stop+1000 >= hdd4_lfmm.sig$position[i]
] #adds in 0.5Kb up or downstream.
if(nrow(temp2) == 1){
print(nrow(temp2))
gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start-1000 <=  hdd4_lfmm.sig$position[i] &
stop+1000 >= hdd4_lfmm.sig$position[i],
sig_SNP_count.hdd4 := sig_SNP_count.hdd4 + 1
] #adds in 0.5 Kb up or downstream.
hdd4_lfmm.sig$found[i] = "1Kb"
}else{
temp2 = gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start-1500 <=  hdd4_lfmm.sig$position[i] &
stop+1500 >= hdd4_lfmm.sig$position[i]
] #adds in 0.5Kb up or downstream.
if(nrow(temp2) == 1){
print(nrow(temp2))
gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start-1500 <=  hdd4_lfmm.sig$position[i] &
stop+1500 >= hdd4_lfmm.sig$position[i],
sig_SNP_count.hdd4 := sig_SNP_count.hdd4 + 1
] #adds in 0.5 Kb up or downstream.
hdd4_lfmm.sig$found[i] = "1.5Kb"
}else{
temp2 = gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start-2000 <=  hdd4_lfmm.sig$position[i] &
stop-2000 >= hdd4_lfmm.sig$position[i]
] #adds in 0.5Kb up or downstream.
if(nrow(temp2) == 1){
print(nrow(temp2))
gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start-2000 <=  hdd4_lfmm.sig$position[i] &
stop+2000 >= hdd4_lfmm.sig$position[i],
sig_SNP_count.hdd4 := sig_SNP_count.hdd4 + 1
] #adds in 0.5 Kb up or downstream.
hdd4_lfmm.sig$found[i] = "2Kb"
}else{
temp2 = gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start-1000 <=  hdd4_lfmm.sig$position[i] &
stop+1000 >= hdd4_lfmm.sig$position[i]
] #adds in 0.5Kb up or downstream.
if(nrow(temp2) > 0){
gff.dt[
contig == hdd4_lfmm.sig$scaffold[i] &
start-1000 <=  hdd4_lfmm.sig$position[i] &
stop+1000 >= hdd4_lfmm.sig$position[i],
sig_SNP_count.hdd4 := sig_SNP_count.hdd4 + 1
] #adds in 0.5 Kb up or downstream.
hdd4_lfmm.sig$found[i] = "1KbMult"
}else{
hdd4_lfmm.sig$found[i] = "no"
}
}
}
}
}
}
}
hdd4_lfmm.sig[hdd4_lfmm.sig$found == "2Kb",] |> nrow()
sum(gff.dt$sig_SNP_count.hdd4)
hdd4_lfmm.sig[hdd4_lfmm.sig$found == "yes",] |> nrow()
hdd4_lfmm.sig[hdd4_lfmm.sig$found == "500b",] |> nrow()
hdd4_lfmm.sig[hdd4_lfmm.sig$found == "1Kb",] |> nrow()
hdd4_lfmm.sig[hdd4_lfmm.sig$found == "1.5Kb",] |> nrow()
hdd4_lfmm.sig[hdd4_lfmm.sig$found == "2Kb",] |> nrow()
hdd4_lfmm.sig[hdd4_lfmm.sig$found == "1KbMult",] |> nrow()
hdd4_lfmm.sig |> nrow()
write.table(gff.dt, "data/LFMM_tables/hdd4.SNPs.genes.txt", colnames = T, rownames = F, sep = "\t")
write.table(gff.dt, "data/LFMM_tables/hdd4.SNPs.genes.txt", col.names = T, row.names = F, sep = "\t")
write.table(gff.dt, "data/Nf_LFMM_tables/hdd4.SNPs.genes.txt", col.names = T, row.names = F, sep = "\t")
write.table(hdd4_lfmm.sig, "data/Nf_LFMM_tables/hdd4.SNPs.gene_found.txt", col.names = T, row.names = F, sep = "\t", quote = F)
write.table(gff.dt, "data/Nf_LFMM_tables/hdd4.gene_SNP_hits.txt", col.names = T, row.names = F, sep = "\t", quote = F)
gff = read.csv("data/Nf_SPANDx_all_seqs/maker2_ann/makerFINAL.all.mRNA_ONLY.gff", sep = "\t")
head(gff)
fT_lfmm = read.table("data/Nf_LFMM_tables/freezeThaw_lfmm.txt", header = T)
colnames(fT_lfmm)
fT_lfmm.sig = fT_lfmm %>% filter(FDR.sig == "sig") %>% select(scaffold, position)
nrow(fT_lfmm.sig)
#new cols for snp counts and whether a gene was found for a snp
gff$sig_SNP_count.fT = rep(0, nrow(gff))
fT_lfmm.sig$found = vector(mode = "character", length = nrow(fT_lfmm.sig))
#set data.table
gff.dt = as.data.table(gff)
#The nested ifs are UGLY. should probably write a function
for(i in 1:nrow(fT_lfmm.sig)){
temp = gff.dt[
contig == fT_lfmm.sig$scaffold[i] &
start <=  fT_lfmm.sig$position[i] &
stop >= fT_lfmm.sig$position[i]
]
#check if there is a matching gene. If not go to next
if(nrow(temp) == 1){
gff.dt[
contig == fT_lfmm.sig$scaffold[i] &
start <=  fT_lfmm.sig$position[i] &
stop >= fT_lfmm.sig$position[i],
sig_SNP_count.fT := sig_SNP_count.fT + 1
] #strict search only finds 34 SNPs on genes out of 182
fT_lfmm.sig$found[i] = "yes"
}else{
temp2 = gff.dt[
contig == fT_lfmm.sig$scaffold[i] &
start-500 <=  fT_lfmm.sig$position[i] &
stop+500 >= fT_lfmm.sig$position[i]
] #adds in 0.5Kb up or downstream.
if(nrow(temp2) == 1){
print(nrow(temp2))
gff.dt[
contig == fT_lfmm.sig$scaffold[i] &
start-500 <=  fT_lfmm.sig$position[i] &
stop+500 >= fT_lfmm.sig$position[i],
sig_SNP_count.fT := sig_SNP_count.fT + 1
] #adds in 0.5 Kb up or downstream.
fT_lfmm.sig$found[i] = "500b"
}else{
temp2 = gff.dt[
contig == fT_lfmm.sig$scaffold[i] &
start-1000 <=  fT_lfmm.sig$position[i] &
stop+1000 >= fT_lfmm.sig$position[i]
] #adds in 0.5Kb up or downstream.
if(nrow(temp2) == 1){
print(nrow(temp2))
gff.dt[
contig == fT_lfmm.sig$scaffold[i] &
start-1000 <=  fT_lfmm.sig$position[i] &
stop+1000 >= fT_lfmm.sig$position[i],
sig_SNP_count.fT := sig_SNP_count.fT + 1
] #adds in 0.5 Kb up or downstream.
fT_lfmm.sig$found[i] = "1Kb"
}else{
temp2 = gff.dt[
contig == fT_lfmm.sig$scaffold[i] &
start-1500 <=  fT_lfmm.sig$position[i] &
stop+1500 >= fT_lfmm.sig$position[i]
] #adds in 0.5Kb up or downstream.
if(nrow(temp2) == 1){
print(nrow(temp2))
gff.dt[
contig == fT_lfmm.sig$scaffold[i] &
start-1500 <=  fT_lfmm.sig$position[i] &
stop+1500 >= fT_lfmm.sig$position[i],
sig_SNP_count.fT := sig_SNP_count.fT + 1
] #adds in 0.5 Kb up or downstream.
fT_lfmm.sig$found[i] = "1.5Kb"
}else{
temp2 = gff.dt[
contig == fT_lfmm.sig$scaffold[i] &
start-2000 <=  fT_lfmm.sig$position[i] &
stop-2000 >= fT_lfmm.sig$position[i]
] #adds in 0.5Kb up or downstream.
if(nrow(temp2) == 1){
print(nrow(temp2))
gff.dt[
contig == fT_lfmm.sig$scaffold[i] &
start-2000 <=  fT_lfmm.sig$position[i] &
stop+2000 >= fT_lfmm.sig$position[i],
sig_SNP_count.fT := sig_SNP_count.fT + 1
] #adds in 0.5 Kb up or downstream.
fT_lfmm.sig$found[i] = "2Kb"
}else{
temp2 = gff.dt[
contig == fT_lfmm.sig$scaffold[i] &
start-1000 <=  fT_lfmm.sig$position[i] &
stop+1000 >= fT_lfmm.sig$position[i]
] #adds in 0.5Kb up or downstream.
if(nrow(temp2) > 0){
gff.dt[
contig == fT_lfmm.sig$scaffold[i] &
start-1000 <=  fT_lfmm.sig$position[i] &
stop+1000 >= fT_lfmm.sig$position[i],
sig_SNP_count.fT := sig_SNP_count.fT + 1
] #adds in 0.5 Kb up or downstream.
fT_lfmm.sig$found[i] = "1KbMult"
}else{
fT_lfmm.sig$found[i] = "no"
}
}
}
}
}
}
}
sum(gff.dt$sig_SNP_count.fT)
gff.dt[sig_SNP_count.fT > 0,]
fT_lfmm.sig[fT_lfmm.sig$found == "yes",] |> nrow()
fT_lfmm.sig[fT_lfmm.sig$found == "500b",] |> nrow()
fT_lfmm.sig[fT_lfmm.sig$found == "1Kb",] |> nrow()
fT_lfmm.sig[fT_lfmm.sig$found == "1.5Kb",] |> nrow()
fT_lfmm.sig[fT_lfmm.sig$found == "2Kb",] |> nrow()
fT_lfmm.sig[fT_lfmm.sig$found == "1KbMult",] |> nrow()
fT_lfmm.sig |> nrow()
fT_lfmm.sig |> nrow()
write.table(gff.dt, "data/Nf_LFMM_tables/freezeThaw.gene_SNP_hits.txt", col.names = T, row.names = F, sep = "\t", quote = F)
write.table(hdd4_lfmm.sig, "data/Nf_LFMM_tables/freezeThaw.SNPs.gene_found.txt", col.names = T, row.names = F, sep = "\t", quote = F)
gff = read.csv("data/Nf_SPANDx_all_seqs/maker2_ann/makerFINAL.all.mRNA_ONLY.gff", sep = "\t")
head(gff)
ppt_lfmm = read.table("data/Nf_LFMM_tables/ppt_lfmm.txt", header = T)
colnames(ppt_lfmm)
ppt_lfmm.sig = ppt_lfmm %>% filter(FDR.sig == "sig") %>% select(scaffold, position)
nrow(ppt_lfmm.sig)
#new cols for snp counts and whether a gene was found for a snp
gff$sig_SNP_count.ppt = rep(0, nrow(gff))
ppt_lfmm.sig$found = vector(mode = "character", length = nrow(ppt_lfmm.sig))
#set data.table
gff.dt = as.data.table(gff)
#The nested ifs are UGLY. should probably write a function
for(i in 1:nrow(ppt_lfmm.sig)){
temp = gff.dt[
contig == ppt_lfmm.sig$scaffold[i] &
start <=  ppt_lfmm.sig$position[i] &
stop >= ppt_lfmm.sig$position[i]
]
#check if there is a matching gene. If not go to next
if(nrow(temp) == 1){
gff.dt[
contig == ppt_lfmm.sig$scaffold[i] &
start <=  ppt_lfmm.sig$position[i] &
stop >= ppt_lfmm.sig$position[i],
sig_SNP_count.ppt := sig_SNP_count.ppt + 1
] #strict search only finds 34 SNPs on genes out of 182
ppt_lfmm.sig$found[i] = "yes"
}else{
temp2 = gff.dt[
contig == ppt_lfmm.sig$scaffold[i] &
start-500 <=  ppt_lfmm.sig$position[i] &
stop+500 >= ppt_lfmm.sig$position[i]
] #adds in 0.5Kb up or downstream.
if(nrow(temp2) == 1){
print(nrow(temp2))
gff.dt[
contig == ppt_lfmm.sig$scaffold[i] &
start-500 <=  ppt_lfmm.sig$position[i] &
stop+500 >= ppt_lfmm.sig$position[i],
sig_SNP_count.ppt := sig_SNP_count.ppt + 1
] #adds in 0.5 Kb up or downstream.
ppt_lfmm.sig$found[i] = "500b"
}else{
temp2 = gff.dt[
contig == ppt_lfmm.sig$scaffold[i] &
start-1000 <=  ppt_lfmm.sig$position[i] &
stop+1000 >= ppt_lfmm.sig$position[i]
] #adds in 0.5Kb up or downstream.
if(nrow(temp2) == 1){
print(nrow(temp2))
gff.dt[
contig == ppt_lfmm.sig$scaffold[i] &
start-1000 <=  ppt_lfmm.sig$position[i] &
stop+1000 >= ppt_lfmm.sig$position[i],
sig_SNP_count.ppt := sig_SNP_count.ppt + 1
] #adds in 0.5 Kb up or downstream.
ppt_lfmm.sig$found[i] = "1Kb"
}else{
temp2 = gff.dt[
contig == ppt_lfmm.sig$scaffold[i] &
start-1500 <=  ppt_lfmm.sig$position[i] &
stop+1500 >= ppt_lfmm.sig$position[i]
] #adds in 0.5Kb up or downstream.
if(nrow(temp2) == 1){
print(nrow(temp2))
gff.dt[
contig == ppt_lfmm.sig$scaffold[i] &
start-1500 <=  ppt_lfmm.sig$position[i] &
stop+1500 >= ppt_lfmm.sig$position[i],
sig_SNP_count.ppt := sig_SNP_count.ppt + 1
] #adds in 0.5 Kb up or downstream.
ppt_lfmm.sig$found[i] = "1.5Kb"
}else{
temp2 = gff.dt[
contig == ppt_lfmm.sig$scaffold[i] &
start-2000 <=  ppt_lfmm.sig$position[i] &
stop-2000 >= ppt_lfmm.sig$position[i]
] #adds in 0.5Kb up or downstream.
if(nrow(temp2) == 1){
print(nrow(temp2))
gff.dt[
contig == ppt_lfmm.sig$scaffold[i] &
start-2000 <=  ppt_lfmm.sig$position[i] &
stop+2000 >= ppt_lfmm.sig$position[i],
sig_SNP_count.ppt := sig_SNP_count.ppt + 1
] #adds in 0.5 Kb up or downstream.
ppt_lfmm.sig$found[i] = "2Kb"
}else{
temp2 = gff.dt[
contig == ppt_lfmm.sig$scaffold[i] &
start-1000 <=  ppt_lfmm.sig$position[i] &
stop+1000 >= ppt_lfmm.sig$position[i]
] #adds in 0.5Kb up or downstream.
if(nrow(temp2) > 0){
gff.dt[
contig == ppt_lfmm.sig$scaffold[i] &
start-1000 <=  ppt_lfmm.sig$position[i] &
stop+1000 >= ppt_lfmm.sig$position[i],
sig_SNP_count.ppt := sig_SNP_count.ppt + 1
] #adds in 0.5 Kb up or downstream.
ppt_lfmm.sig$found[i] = "1KbMult"
}else{
ppt_lfmm.sig$found[i] = "no"
}
}
}
}
}
}
}
sum(gff.dt$sig_SNP_count.ppt)
gff.dt[sig_SNP_count.ppt > 0,]
ppt_lfmm.sig[ppt_lfmm.sig$found == "yes",] |> nrow()
ppt_lfmm.sig[ppt_lfmm.sig$found == "500b",] |> nrow()
ppt_lfmm.sig[ppt_lfmm.sig$found == "1Kb",] |> nrow()
ppt_lfmm.sig[ppt_lfmm.sig$found == "1.5Kb",] |> nrow()
ppt_lfmm.sig[ppt_lfmm.sig$found == "2Kb",] |> nrow()
ppt_lfmm.sig[ppt_lfmm.sig$found == "1KbMult",] |> nrow()
ppt_lfmm.sig |> nrow()
q(save="no")
require(fungaltraits)
install.packages("devtools")
devtools::install_github("ropenscilabs/datastorr")
fungal_traits()
require(fungaltraits)
devtools::install_github("traitecoevo/fungaltraits")
require(fungaltraits)
fungal_traits()
foo = fungal_traits()
colnames(foo)
q(save="no")
