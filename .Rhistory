sample_metadata = left_join(
data.frame(sample = fam_info[,1]),
sample_ID_map %>% select(sample,Site)
) %>% left_join(.,
site_info %>% select(Site, state.name)
) %>% select(sample, state.name)
sample_metadata
######
#K4 plot
colnames(K3) = c("sample", "V1", "V2", "V3")
K3.meta = left_join(K3, sample_metadata)
sample_order.K3 = K3.meta[with(K3.meta, order(state.name, V1, V2, V3)),] %>% select(sample)
K3.long = pivot_longer(K4.meta, names_to = "ancestor", values_to = "proportion", cols = starts_with("V"))
K3.long = pivot_longer(K3.meta, names_to = "ancestor", values_to = "proportion", cols = starts_with("V"))
1/(1+2)
0.5/(0.5+1)
K3
K3.meta = left_join(K3, sample_metadata)
sample_order.K3 = K3.meta[with(K3.meta, order(state.name, V1, V2, V3)),] %>% select(sample)
K3.long = pivot_longer(K3.meta, names_to = "ancestor", values_to = "proportion", cols = starts_with("V"))
K3.long$sample = factor(K3.long$sample, levels = as.factor(sample_order.K3$sample))
p.K3 = ggplot(K3.long, aes(sample, proportion, fill = ancestor)) +
geom_bar(stat = "identity") +
facet_grid(~factor(state.name, levels = state_order), scales = "free_x", switch = "x", space = "free_x") + #Note the use of levels here at the facet argument. This is a pain in the butt to get to work (ordering a factor for index level ordering and then also ordering facets
guides(fill = "none") +
labs(y = "K = 4", x = "Genotype") +
scale_fill_manual(values = rev(cbPalette)) +
my_gg_theme +
theme(
strip.background=element_rect(colour="black", fill=NA),
strip.text.x = element_text(angle = 90, size = 30),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 30),
axis.text.y = element_text(size = 25),
)
p.K3
K3.long$state.name %>% unique
state_order = c("ME.N", "NH.CCM", "NH.CW", "PA", "WV", "MI") #REset to approximately coincide with site distance
p.K3 = ggplot(K3.long, aes(sample, proportion, fill = ancestor)) +
geom_bar(stat = "identity") +
facet_grid(~factor(state.name, levels = state_order), scales = "free_x", switch = "x", space = "free_x") + #Note the use of levels here at the facet argument. This is a pain in the butt to get to work (ordering a factor for index level ordering and then also ordering facets
guides(fill = "none") +
labs(y = "K = 4", x = "Genotype") +
scale_fill_manual(values = rev(cbPalette)) +
my_gg_theme +
theme(
strip.background=element_rect(colour="black", fill=NA),
strip.text.x = element_text(angle = 90, size = 30),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 30),
axis.text.y = element_text(size = 25),
)
p.K3
q(save="no")
require(ggplot2)
require(gridExtra)
require(gtable)
source("~/repo/neonectria_genome_reseq_10072020/R_scripts/ggplot_theme.txt")
#evanno = read.table("data/Nf_SPANDx_all_seqs_str_th/evanno_out_K1-10.r_format.txt", header = T, sep = "\t")
evanno = read.table("data/Nd_SPANDx_all_seqs_str_th/evanno_out.K1-12.r_format.txt", header = T, sep = "\t")
#evanno = read.table("data/Nf_SPANDx_all_seqs_str_th/evanno_out_K1-10.r_format.txt", header = T, sep = "\t")
evanno = read.table("data/Nd_SPANDx_all_seqs_str_th/evanno_out.K1-12.r_format.txt", header = T, sep = "\t")
p1 = ggplot(evanno, aes(K, Mean.LnP.K)) +
geom_point() +
#geom_line() +
geom_errorbar(data = evanno, aes(x = K, ymin = Mean.LnP.K - Stdev.LnP.K, ymax = Mean.LnP.K + Stdev.LnP.K)) +
scale_x_continuous(limits = c(1,10), breaks = c(2,5,10)) +
labs(y = "L(K)") +
my_gg_theme
p2 = ggplot(evanno, aes(K, Ln.prime.K)) +
geom_point() +
#geom_line() +
geom_errorbar(data = evanno, aes(x = K, ymin = Ln.prime.K - Stdev.LnP.K, ymax = Ln.prime.K + Stdev.LnP.K)) +
scale_x_continuous(limits = c(1,10), breaks = c(2,5,10)) +
labs(y = "L'(K)") +
my_gg_theme
p3 = ggplot(evanno, aes(K, Ln.prime.prime.K)) +
geom_point() +
#geom_line() +
geom_errorbar(data = evanno, aes(x = K, ymin = Ln.prime.prime.K - Stdev.LnP.K, ymax = Ln.prime.prime.K + Stdev.LnP.K)) +
scale_x_continuous(limits = c(1,10), breaks = c(2,5,10)) +
labs(y = "L''(K)") +
my_gg_theme
p4 = ggplot(evanno, aes(K, Delta.K)) +
geom_point() +
geom_line() +
#geom_errorbar(data = evanno, aes(x = K, ymin = L.primer.primer.K - Stdev.LnP.K., ymax = L.primer.primer.K + Stdev.LnP.K.)) +
scale_x_continuous(limits = c(1,10), breaks = c(2,5,10)) +
labs(y = expression(paste(Delta,"K"))) +
my_gg_theme
gp1<-ggplotGrob(p1)
gp2<-ggplotGrob(p2)
gp3<-ggplotGrob(p3)
gp4<-ggplotGrob(p4)
gp13 = rbind(gp1, gp3)
gp24 = rbind(gp2, gp4)
pdf("figures/Nd.evanno.new_seqs.pdf", width = 8, height = 6)
grid.arrange(gp13, gp24, ncol = 2)
dev.off()
evanno
p1 = ggplot(evanno, aes(K, Mean.LnP.K)) +
geom_point() +
#geom_line() +
geom_errorbar(data = evanno, aes(x = K, ymin = Mean.LnP.K - Stdev.LnP.K, ymax = Mean.LnP.K + Stdev.LnP.K)) +
scale_x_continuous(limits = c(1,12), breaks = c(2,5,7,10)) +
labs(y = "L(K)") +
my_gg_theme
p2 = ggplot(evanno, aes(K, Ln.prime.K)) +
geom_point() +
#geom_line() +
geom_errorbar(data = evanno, aes(x = K, ymin = Ln.prime.K - Stdev.LnP.K, ymax = Ln.prime.K + Stdev.LnP.K)) +
scale_x_continuous(limits = c(1,12), breaks = c(2,5,7,10)) +
labs(y = "L'(K)") +
my_gg_theme
p3 = ggplot(evanno, aes(K, Ln.prime.prime.K)) +
geom_point() +
#geom_line() +
geom_errorbar(data = evanno, aes(x = K, ymin = Ln.prime.prime.K - Stdev.LnP.K, ymax = Ln.prime.prime.K + Stdev.LnP.K)) +
scale_x_continuous(limits = c(1,12), breaks = c(2,5,7,10)) +
labs(y = "L''(K)") +
my_gg_theme
p4 = ggplot(evanno, aes(K, Delta.K)) +
geom_point() +
geom_line() +
#geom_errorbar(data = evanno, aes(x = K, ymin = L.primer.primer.K - Stdev.LnP.K., ymax = L.primer.primer.K + Stdev.LnP.K.)) +
scale_x_continuous(limits = c(1,12), breaks = c(2,5,7,10)) +
labs(y = expression(paste(Delta,"K"))) +
my_gg_theme
gp1<-ggplotGrob(p1)
gp2<-ggplotGrob(p2)
gp3<-ggplotGrob(p3)
gp4<-ggplotGrob(p4)
gp13 = rbind(gp1, gp3)
gp24 = rbind(gp2, gp4)
pdf("figures/Nd.evanno.new_seqs.pdf", width = 8, height = 6)
grid.arrange(gp13, gp24, ncol = 2)
dev.off()
require(dplyr)
require(ggplot2)
require(tidyr)
require(gridExtra)
source("R_scripts/ggplot_theme.txt")
K3 = read.table("data/Nd_SPANDx_all_seqs_str_th/str_K3_rep5_f.r_format.txt", header = F)
############
#Read meatdata
fam_info = read.table("data/Nd_SPANDx_all_seqs/out.filtered.LD_filtered_0.5_10Kb.fam", header = F)
sample_ID_map = read.table("data/sample_metadata/sample_ID_mapping_all_samples_05052022.txt", header = T, sep = "\t")
colnames(sample_ID_map)[3:4] = c("DNA_label", "sample")
site_info = read.table("data/sample_metadata/site_coords.txt", header = T)
sample_metadata = left_join(
data.frame(sample = fam_info[,1]),
sample_ID_map %>% select(sample,Site)
) %>% left_join(.,
site_info %>% select(Site, state.name)
) %>% select(sample, state.name)
state_order = c("ME.N", "NH.CCM", "NH.CW", "PA", "WV", "MI") #REset to approximately coincide with site distance
######
#K4 plot
colnames(K3) = c("sample", "V1", "V2", "V3")
K3.meta = left_join(K3, sample_metadata)
sample_order.K3 = K3.meta[with(K3.meta, order(state.name, V1, V2, V3)),] %>% select(sample)
K3.long = pivot_longer(K3.meta, names_to = "ancestor", values_to = "proportion", cols = starts_with("V"))
K3.long$sample = factor(K3.long$sample, levels = as.factor(sample_order.K3$sample))
p.K3 = ggplot(K3.long, aes(sample, proportion, fill = ancestor)) +
geom_bar(stat = "identity") +
facet_grid(~factor(state.name, levels = state_order), scales = "free_x", switch = "x", space = "free_x") + #Note the use of levels here at the facet argument. This is a pain in the butt to get to work (ordering a factor for index level ordering and then also ordering facets
guides(fill = "none") +
labs(y = "K = 4", x = "Genotype") +
scale_fill_manual(values = rev(cbPalette)) +
my_gg_theme +
theme(
strip.background=element_rect(colour="black", fill=NA),
strip.text.x = element_text(angle = 90, size = 30),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 30),
axis.text.y = element_text(size = 25),
)
p.K3
pdf("figures/Nd.LD_filtered.structure.K3.pdf", width = 48, height = 4)
p.K3
dev.off()
K2 = read.table("data/Nd_SPANDx_all_seqs_str_th/str_K2_rep5_f.r_format.txt", header = F)
K3 = read.table("data/Nd_SPANDx_all_seqs_str_th/str_K3_rep5_f.r_format.txt", header = F)
K4 = read.table("data/Nd_SPANDx_all_seqs_str_th/str_K4_rep5_f.r_format.txt", header = F)
K7 = read.table("data/Nd_SPANDx_all_seqs_str_th/str_K7_rep5_f.r_format.txt", header = F)
############
#Read meatdata
fam_info = read.table("data/Nd_SPANDx_all_seqs/out.filtered.LD_filtered_0.5_10Kb.fam", header = F)
sample_ID_map = read.table("data/sample_metadata/sample_ID_mapping_all_samples_05052022.txt", header = T, sep = "\t")
colnames(sample_ID_map)[3:4] = c("DNA_label", "sample")
site_info = read.table("data/sample_metadata/site_coords.txt", header = T)
sample_metadata = left_join(
data.frame(sample = fam_info[,1]),
sample_ID_map %>% select(sample,Site)
) %>% left_join(.,
site_info %>% select(Site, state.name)
) %>% select(sample, state.name)
state_order = c("ME.N", "NH.CCM", "NH.CW", "PA", "WV", "MI") #REset to approximately coincide with site distance
######
#plot
colnames(K2) = c("sample", "V1", "V2")
colnames(K3) = c("sample", "V1", "V2", "V3")
colnames(K4) = c("sample", "V1", "V2", "V3", "V4")
colnames(K7) = c("sample", "V1", "V2", "V3", "V4", "V5", "V6", "V7")
K2.meta = left_join(K2, sample_metadata)
K3.meta = left_join(K3, sample_metadata)
K4.meta = left_join(K4, sample_metadata)
K7.meta = left_join(K7, sample_metadata)
sample_order.K2 = K2.meta[with(K2.meta, order(state.name, V1, V2)),] %>% select(sample)
sample_order.K3 = K3.meta[with(K3.meta, order(state.name, V1, V2, V3)),] %>% select(sample)
sample_order.K4 = K4.meta[with(K4.meta, order(state.name, V1, V2, V3, V4)),] %>% select(sample)
sample_order.K7 = K7.meta[with(K7.meta, order(state.name, V1, V2, V3, V4, V5, V6, V7)),] %>% select(sample)
#long format
K2.long = pivot_longer(K2.meta, names_to = "ancestor", values_to = "proportion", cols = starts_with("V"))
K3.long = pivot_longer(K3.meta, names_to = "ancestor", values_to = "proportion", cols = starts_with("V"))
K4.long = pivot_longer(K4.meta, names_to = "ancestor", values_to = "proportion", cols = starts_with("V"))
K7.long = pivot_longer(K7.meta, names_to = "ancestor", values_to = "proportion", cols = starts_with("V"))
#order factor level
K2.long$sample = factor(K2.long$sample, levels = as.factor(sample_order.K2$sample))
K3.long$sample = factor(K3.long$sample, levels = as.factor(sample_order.K3$sample))
K4.long$sample = factor(K4.long$sample, levels = as.factor(sample_order.K4$sample))
K7.long$sample = factor(K7.long$sample, levels = as.factor(sample_order.K7$sample))
#PLOTS
p.K2 = ggplot(K2.long, aes(sample, proportion, fill = ancestor)) +
geom_bar(stat = "identity") +
facet_grid(~factor(state.name, levels = state_order), scales = "free_x", switch = "x", space = "free_x") + #Note the use of levels here at the facet argument. This is a pain in the butt to get to work (ordering a factor for index level ordering and then also ordering facets
guides(fill = "none") +
labs(y = "K = 2", x = "Genotype") +
scale_fill_manual(values = rev(cbPalette)) +
my_gg_theme +
theme(
strip.background=element_rect(colour="black", fill=NA),
strip.text.x = element_text(angle = 90, size = 30),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 30),
axis.text.y = element_text(size = 25),
)
p.K2
p.K3 = ggplot(K3.long, aes(sample, proportion, fill = ancestor)) +
geom_bar(stat = "identity") +
facet_grid(~factor(state.name, levels = state_order), scales = "free_x", switch = "x", space = "free_x") + #Note the use of levels here at the facet argument. This is a pain in the butt to get to work (ordering a factor for index level ordering and then also ordering facets
guides(fill = "none") +
labs(y = "K = 3", x = "Genotype") +
scale_fill_manual(values = rev(cbPalette)) +
my_gg_theme +
theme(
strip.background=element_rect(colour="black", fill=NA),
strip.text.x = element_text(angle = 90, size = 30),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 30),
axis.text.y = element_text(size = 25),
)
p.K3
p.K4 = ggplot(K4.long, aes(sample, proportion, fill = ancestor)) +
geom_bar(stat = "identity") +
facet_grid(~factor(state.name, levels = state_order), scales = "free_x", switch = "x", space = "free_x") + #Note the use of levels here at the facet argument. This is a pain in the butt to get to work (ordering a factor for index level ordering and then also ordering facets
guides(fill = "none") +
labs(y = "K = 4", x = "Genotype") +
scale_fill_manual(values = rev(cbPalette)) +
my_gg_theme +
theme(
strip.background=element_rect(colour="black", fill=NA),
strip.text.x = element_text(angle = 90, size = 30),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 30),
axis.text.y = element_text(size = 25),
)
p.K4
p.K7 = ggplot(K7.long, aes(sample, proportion, fill = ancestor)) +
geom_bar(stat = "identity") +
facet_grid(~factor(state.name, levels = state_order), scales = "free_x", switch = "x", space = "free_x") + #Note the use of levels here at the facet argument. This is a pain in the butt to get to work (ordering a factor for index level ordering and then also ordering facets
guides(fill = "none") +
labs(y = "K = 7", x = "Genotype") +
scale_fill_manual(values = rev(cbPalette)) +
my_gg_theme +
theme(
strip.background=element_rect(colour="black", fill=NA),
strip.text.x = element_text(angle = 90, size = 30),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 30),
axis.text.y = element_text(size = 25),
)
p.K7
pdf("figures/Nd.LD_filtered.structure.K2-7.pdf", width = 48, height = 16)
grid.arrange(K2,K3,K4,K7, nrow = 4)
dev.off()
pdf("figures/Nd.LD_filtered.structure.K2-7.pdf", width = 48, height = 16)
grid.arrange(p.K2,p.K3,p.K4,p.K7, nrow = 4)
dev.off()
pdf("figures/Nd.LD_filtered.structure.K2-7.pdf", width = 24, height = 16)
grid.arrange(p.K2,p.K3,p.K4,p.K7, nrow = 4)
dev.off()
pdf("figures/Nd.LD_filtered.structure.K2-7.pdf", width = 12, height = 8)
grid.arrange(p.K2,p.K3,p.K4,p.K7, nrow = 4)
dev.off()
#PLOTS
p.K2 = ggplot(K2.long, aes(sample, proportion, fill = ancestor)) +
geom_bar(stat = "identity") +
facet_grid(~factor(state.name, levels = state_order), scales = "free_x", switch = "x", space = "free_x") + #Note the use of levels here at the facet argument. This is a pain in the butt to get to work (ordering a factor for index level ordering and then also ordering facets
guides(fill = "none") +
labs(y = "K = 2", x = "Genotype") +
scale_fill_manual(values = rev(cbPalette)) +
my_gg_theme +
theme(
strip.background=element_rect(colour="black", fill=NA),
strip.text.x = element_text(angle = 0, size = 15),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 30),
axis.text.y = element_text(size = 25),
)
p.K3 = ggplot(K3.long, aes(sample, proportion, fill = ancestor)) +
geom_bar(stat = "identity") +
facet_grid(~factor(state.name, levels = state_order), scales = "free_x", switch = "x", space = "free_x") + #Note the use of levels here at the facet argument. This is a pain in the butt to get to work (ordering a factor for index level ordering and then also ordering facets
guides(fill = "none") +
labs(y = "K = 3", x = "Genotype") +
scale_fill_manual(values = rev(cbPalette)) +
my_gg_theme +
theme(
strip.background=element_rect(colour="black", fill=NA),
strip.text.x = element_text(angle = 0, size = 15),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 30),
axis.text.y = element_text(size = 25),
)
p.K4 = ggplot(K4.long, aes(sample, proportion, fill = ancestor)) +
geom_bar(stat = "identity") +
facet_grid(~factor(state.name, levels = state_order), scales = "free_x", switch = "x", space = "free_x") + #Note the use of levels here at the facet argument. This is a pain in the butt to get to work (ordering a factor for index level ordering and then also ordering facets
guides(fill = "none") +
labs(y = "K = 4", x = "Genotype") +
scale_fill_manual(values = rev(cbPalette)) +
my_gg_theme +
theme(
strip.background=element_rect(colour="black", fill=NA),
strip.text.x = element_text(angle = 0, size = 15),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 30),
axis.text.y = element_text(size = 25),
)
p.K7 = ggplot(K7.long, aes(sample, proportion, fill = ancestor)) +
geom_bar(stat = "identity") +
facet_grid(~factor(state.name, levels = state_order), scales = "free_x", switch = "x", space = "free_x") + #Note the use of levels here at the facet argument. This is a pain in the butt to get to work (ordering a factor for index level ordering and then also ordering facets
guides(fill = "none") +
labs(y = "K = 7", x = "Genotype") +
scale_fill_manual(values = rev(cbPalette)) +
my_gg_theme +
theme(
strip.background=element_rect(colour="black", fill=NA),
strip.text.x = element_text(angle = 0, size = 15),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 30),
axis.text.y = element_text(size = 25),
)
pdf("figures/Nd.LD_filtered.structure.K2-7.pdf", width = 12, height = 8)
grid.arrange(p.K2,p.K3,p.K4,p.K7, nrow = 4)
dev.off()
#PLOTS
p.K2 = ggplot(K2.long, aes(sample, proportion, fill = ancestor)) +
geom_bar(stat = "identity") +
facet_grid(~factor(state.name, levels = state_order), scales = "free_x", switch = "x", space = "free_x") + #Note the use of levels here at the facet argument. This is a pain in the butt to get to work (ordering a factor for index level ordering and then also ordering facets
guides(fill = "none") +
labs(y = "K = 2", x = "Genotype") +
scale_fill_manual(values = rev(cbPalette)) +
my_gg_theme +
theme(
strip.background=element_rect(colour="black", fill=NA),
strip.text.x = element_text(angle = 0, size = 15),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 15),
axis.text.y = element_text(size = 15),
)
p.K3 = ggplot(K3.long, aes(sample, proportion, fill = ancestor)) +
geom_bar(stat = "identity") +
facet_grid(~factor(state.name, levels = state_order), scales = "free_x", switch = "x", space = "free_x") + #Note the use of levels here at the facet argument. This is a pain in the butt to get to work (ordering a factor for index level ordering and then also ordering facets
guides(fill = "none") +
labs(y = "K = 3", x = "Genotype") +
scale_fill_manual(values = rev(cbPalette)) +
my_gg_theme +
theme(
strip.background=element_rect(colour="black", fill=NA),
strip.text.x = element_text(angle = 0, size = 15),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 15),
axis.text.y = element_text(size = 15),
)
p.K4 = ggplot(K4.long, aes(sample, proportion, fill = ancestor)) +
geom_bar(stat = "identity") +
facet_grid(~factor(state.name, levels = state_order), scales = "free_x", switch = "x", space = "free_x") + #Note the use of levels here at the facet argument. This is a pain in the butt to get to work (ordering a factor for index level ordering and then also ordering facets
guides(fill = "none") +
labs(y = "K = 4", x = "Genotype") +
scale_fill_manual(values = rev(cbPalette)) +
my_gg_theme +
theme(
strip.background=element_rect(colour="black", fill=NA),
strip.text.x = element_text(angle = 0, size = 15),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 15),
axis.text.y = element_text(size = 15),
)
p.K7 = ggplot(K7.long, aes(sample, proportion, fill = ancestor)) +
geom_bar(stat = "identity") +
facet_grid(~factor(state.name, levels = state_order), scales = "free_x", switch = "x", space = "free_x") + #Note the use of levels here at the facet argument. This is a pain in the butt to get to work (ordering a factor for index level ordering and then also ordering facets
guides(fill = "none") +
labs(y = "K = 7", x = "Genotype") +
scale_fill_manual(values = rev(cbPalette)) +
my_gg_theme +
theme(
strip.background=element_rect(colour="black", fill=NA),
strip.text.x = element_text(angle = 0, size = 15),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 15),
axis.text.y = element_text(size = 15),
)
pdf("figures/Nd.LD_filtered.structure.K2-7.pdf", width = 12, height = 8)
grid.arrange(p.K2,p.K3,p.K4,p.K7, nrow = 4)
dev.off()
foo = c(2,4,8,16,32,64,128)
y = c(1:7)
y
plot(foo ~ y)
plot(log(foo) ~ y)
plot(log(foo)*0.2 ~ y)
plot(log(foo*0.2) ~ y)
summary(lm(log(foo) ~ y))
summary(lm(log(foo*0.2) ~ y))
summary(lm(log(foo)*0.2 ~ y))
x = 1:7
x
y = c(2,4,8,16,32,64,128)
x = 1:7
summary(lm(log(y) ~ x))
summary(lm(log(y * 0.2) ~ x))
summary(lm(log(y * 0.5) ~ x))
summary(lm(log(y) * 0.2 ~ x))
summary(lm(log(y) * 0.5 ~ x))
plot(log(foo) ~ y)
plot(log(foo*0.5) ~ y)
plot(log(foo*0.5) ~ x)
plot(log(foo) ~ x)
summary(lm(y ~ x))
summary(lm(y ~ I(x/2))
)
y = 1:10
x = 1:10
summary(lm(y ~ x))
summary(lm(y ~ I(x/2)))
q(save="no")
require(tidyr)
require(ggplot2)
source("~/repo/neonectria_genome_reseq_10072020/R_scripts/ggplot_theme.txt")
#filtered VCF
vcf <- read.vcfR("~/Nf_SPANDx_all_seqs/Outputs/Master_vcf/out.filtered.PASS.DP_filtered.lt25missing.biallele.mac2.recode.vcf", verbose = FALSE)
require(vcfR)
#filtered VCF
vcf <- read.vcfR("~/Nf_SPANDx_all_seqs/Outputs/Master_vcf/out.filtered.PASS.DP_filtered.lt25missing.biallele.mac2.recode.vcf", verbose = FALSE)
#filtered VCF
vcf <- read.vcfR("data/Nf_SPANDx_all_seqs/Outputs/Master_vcf/out.filtered.PASS.DP_filtered.lt25missing.biallele.mac2.recode.vcf", verbose = FALSE)
#filtered VCF
#vcf <- read.vcfR("~/Nf_SPANDx_all_seqs/Outputs/Master_vcf/out.filtered.PASS.DP_filtered.lt25missing.biallele.mac2.recode.vcf", verbose = FALSE)
vcf <- read.vcfR("data/Nf_SPANDx_all_seqs/out.filtered.PASS.DP_filtered.lt25missing.biallele.mac2.recode.vcf", verbose = FALSE)
gt <- extract.gt(vcf, element='GT', as.numeric=TRUE)
gt.na = is.na(gt)
gt.na.perc = data.frame(sample = colnames(gt.na), missing = apply(gt.na, 2, sum)/nrow(gt.na) )
p1 = ggplot(gt.na.perc, aes(x=sample, y=missing)) +
geom_col() +
geom_hline(yintercept = 0.3) +
my_gg_theme +
theme(
axis.text.x = element_text(angle = 90)
)
pdf("figures/Nf_missing_by_sample.new_assembly.pdf", width = 24, height = 6)
p1
dev.off()
p1 = ggplot(gt.na.perc, aes(x=sample, y=missing)) +
geom_col() +
geom_hline(yintercept = 0.35) +
my_gg_theme +
theme(
axis.text.x = element_text(angle = 90)
)
p1
gt.na.perc
quantile(gt.na.perc$missing)
?quantile
quantile(gt.na.perc$missing, probs = seq(0, 0.1, 0.25, 0.5, 0.75, 0.9, 1))
quantile(gt.na.perc$missing, probs = seq(0, 0.1, 0.9))
quantile(gt.na.perc$missing, probs = c(0, 0.1, 0.25, 0.5, 0.75, 0.9, 1))
quantile(gt.na.perc$missing, probs = 0.9)
quantile(gt.na.perc$missing, probs = 0.9)[1]
p1 = ggplot(gt.na.perc, aes(x=sample, y=missing)) +
geom_col() +
geom_hline(yintercept = quantile(gt.na.perc$missing, probs = 0.9)[1]) +
my_gg_theme +
theme(
axis.text.x = element_text(angle = 90)
)
p1
q(save="no")
