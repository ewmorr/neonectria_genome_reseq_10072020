p5
p6
dev.off()
c25
p5 = ggplot(ppt_genes.sig.KO %>% filter(!is.na(KO)), aes(x = B, fill = B)) +
geom_histogram(stat = "count") +
labs(y = "SNP count") +
my_gg_theme +
scale_fill_manual(palette = c25) +
theme(
axis.text.x = element_blank(),
axis.title.x = element_blank()
)
p6 = ggplot(ppt_genes.sig.KO %>% filter(!is.na(KO)), aes(x = B, y = sig_SNP_count, fill = B)) +
geom_col() +
my_gg_theme +
labs(y = "Gene count") +
scale_fill_manual(palette = c25) +
theme(
axis.text.x = element_blank(),
axis.title.x = element_blank()
)
pdf("figures/sig_SNPs_KO.pdf", width = 12, height = 4)
p1
p2
p3
p4
p5
p6
p5 = ggplot(ppt_genes.sig.KO %>% filter(!is.na(KO)), aes(x = B, fill = B)) +
geom_histogram(stat = "count") +
labs(y = "SNP count") +
my_gg_theme +
scale_fill_manual(palette = c25) +
theme(
axis.text.x = element_blank(),
axis.title.x = element_blank()
)
p5
p5 = ggplot(ppt_genes.sig.KO %>% filter(!is.na(KO)), aes(x = B, fill = B)) +
geom_histogram(stat = "count") +
labs(y = "SNP count") +
my_gg_theme +
scale_fill_manual(values = c25) +
theme(
axis.text.x = element_blank(),
axis.title.x = element_blank()
)
p6 = ggplot(ppt_genes.sig.KO %>% filter(!is.na(KO)), aes(x = B, y = sig_SNP_count, fill = B)) +
geom_col() +
my_gg_theme +
labs(y = "Gene count") +
scale_fill_manual(values = c25) +
theme(
axis.text.x = element_blank(),
axis.title.x = element_blank()
)
pdf("figures/sig_SNPs_KO.pdf", width = 12, height = 4)
p1
p2
p3
p4
p5
p6
dev.off()
p2 = ggplot(hdd4_genes.sig.KO %>% filter(!is.na(KO)), aes(x = B, y = sig_SNP_count, fill = B)) +
geom_col() +
my_gg_theme +
labs(y = "Gene count") +
scale_x_continuous(breaks = c(0, 6, 12)) +
scale_fill_brewer(palette = "Paired") +
theme(
axis.text.x = element_blank(),
axis.title.x = element_blank()
)
pdf("figures/sig_SNPs_KO.pdf", width = 12, height = 4)
p1
p2
p2 = ggplot(hdd4_genes.sig.KO %>% filter(!is.na(KO)), aes(x = B, y = sig_SNP_count, fill = B)) +
geom_col() +
my_gg_theme +
labs(y = "Gene count") +
scale_y_continuous(breaks = c(0, 6, 12)) +
scale_fill_brewer(palette = "Paired") +
theme(
axis.text.x = element_blank(),
axis.title.x = element_blank()
)
p2
dev.off()
pdf("figures/sig_SNPs_KO.pdf", width = 12, height = 4)
p1
p2
p3
p4
p5
p6
dev.off()
p1 = ggplot(hdd4_genes.sig.KO %>% filter(!is.na(KO)), aes(x = B, fill = B)) +
geom_histogram(stat = "count") +
labs(y = "Gene count") +
scale_fill_brewer(palette = "Paired") +
my_gg_theme +
theme(
axis.text.x = element_blank(),
axis.title.x = element_blank()
)
p1
p2 = ggplot(hdd4_genes.sig.KO %>% filter(!is.na(KO)), aes(x = B, y = sig_SNP_count, fill = B)) +
geom_col() +
my_gg_theme +
labs(y = "SNP count") +
scale_y_continuous(breaks = c(0, 6, 12)) +
scale_fill_brewer(palette = "Paired") +
theme(
axis.text.x = element_blank(),
axis.title.x = element_blank()
)
p3 = ggplot(fT_genes.sig.KO %>% filter(!is.na(KO)), aes(x = B, fill = B)) +
geom_histogram(stat = "count") +
labs(y = "Gene count") +
my_gg_theme +
scale_fill_brewer(palette = "Paired") +
theme(
axis.text.x = element_blank(),
axis.title.x = element_blank()
)
p4 = ggplot(fT_genes.sig.KO %>% filter(!is.na(KO)), aes(x = B, y = sig_SNP_count, fill = B)) +
geom_col() +
my_gg_theme +
labs(y = "SNP count") +
scale_fill_brewer(palette = "Paired") +
theme(
axis.text.x = element_blank(),
axis.title.x = element_blank()
)
p5 = ggplot(ppt_genes.sig.KO %>% filter(!is.na(KO)), aes(x = B, fill = B)) +
geom_histogram(stat = "count") +
labs(y = "Gene count") +
my_gg_theme +
scale_fill_manual(values = c25) +
theme(
axis.text.x = element_blank(),
axis.title.x = element_blank()
)
p6 = ggplot(ppt_genes.sig.KO %>% filter(!is.na(KO)), aes(x = B, y = sig_SNP_count, fill = B)) +
geom_col() +
my_gg_theme +
labs(y = "SNP count") +
scale_fill_manual(values = c25) +
theme(
axis.text.x = element_blank(),
axis.title.x = element_blank()
)
pdf("figures/sig_SNPs_KO.pdf", width = 12, height = 4)
p1
p2
p3
p4
p5
p6
dev.off()
hdd4_genes.sig.KO[order(hdd4_genes.sig.KO$sig_SNP_count),]
q(save="no")
require(data.table)
require(ggplot2)
source("R_scripts/ggplot_theme.txt")
r_tab = fread("data/Nf_SPANDx_all_seqs/out.filtered.PASS.DP_filtered.lt25missing.biallele.mac2.rm_NA_ind.LD_decay.ld.test")
head(r_tab)
#calculate SNP dist
r_tab$distance = r_tab$BP_B - r_tab$BP_A
head(r_tab)
ggplot(r_tab, aes(x = distance, y = R2)) +
geom_point() +
labs(x = "Distance (bp)", y = expression(paste("R"^2))) +
my_gg_theme
ggplot(r_tab, aes(x = distance, y = R2, color = CHR_A)) +
geom_point() +
scale_color_manual(values = c25) +
labs(x = "Distance (bp)", y = expression(paste("R"^2))) +
my_gg_theme
ggplot(r_tab, aes(x = distance, y = R2)) +
geom_point() +
labs(x = "Distance (bp)", y = expression(paste("R"^2))) +
scale_x_continuous(labels = fancy_scientific) +
my_gg_theme
require(scales)
ggplot(r_tab, aes(x = distance, y = R2)) +
geom_point() +
labs(x = "Distance (bp)", y = expression(paste("R"^2))) +
scale_x_continuous(labels = scientific) +
my_gg_theme
ggplot(r_tab, aes(x = distance, y = R2, color = CHR_A)) +
geom_point() +
scale_color_manual(values = c25) +
labs(x = "Distance (bp)", y = expression(paste("R"^2))) +
scale_x_continuous(labels = fancy_scientific) +
my_gg_theme
#calculate means
r_tab$distc <- cut(r_tab$dist,breaks=seq(from=min(r_tab$dist)-1,to=max(r_tab$dist)+1,by=1000))
head(r_tab)
#calculate means
r_tab$distc <- cut(r_tab$dist,breaks=seq(from=0,to=max(r_tab$dist)+1,by=1000))
#calculate means
r_tab$distc <- cut(r_tab$distance,breaks=seq(from=0,to=max(r_tab$distance)+1,by=1000))
head(r_tab$distc)
head(r_tab)
#calculate means
r_tab$distc <- cut(r_tab$distance,breaks=seq(from=1,to=max(r_tab$distance)+1,by=1000))
head(r_tab)
#calculate means
r_tab$distc <- cut(r_tab$distance,breaks=seq(from=1,to=max(r_tab$distance)+1,by=999))
head(r_tab)
#calculate means
r_tab$distc <- cut(r_tab$distance,breaks=seq(from=0,to=max(r_tab$distance)+1,by=1000))
head(r_tab)
require(dplyr)
r_tab <- r_tab %>% group_by(distc) %>% summarise(mean=mean(rsq),median=median(rsq))
r_tab <- r_tab %>% group_by(distc) %>% summarise(mean=mean(R2),median=median(R2))
ggplot(r_tab, aes(x = distance, y = mean)) +
geom_point() +
geom_line() +
labs(x = "Distance (bp)", y = expression(paste("R"^2))) +
scale_x_continuous(labels = fancy_scientific) +
my_gg_theme
head(r_tab)
r_tab = fread("data/Nf_SPANDx_all_seqs/out.filtered.PASS.DP_filtered.lt25missing.biallele.mac2.rm_NA_ind.LD_decay.ld.test")
#calculate SNP dist
r_tab$distance = r_tab$BP_B - r_tab$BP_A
#calculate means
r_tab$distc <- cut(r_tab$distance,breaks=seq(from=0,to=max(r_tab$distance)+1,by=1000))
r_tab_avg <- r_tab %>% group_by(distc) %>% summarise(mean=mean(R2),median=median(R2))
ggplot(r_tab_avg, aes(x = distance, y = mean)) +
geom_point() +
geom_line() +
labs(x = "Distance (bp)", y = expression(paste("R"^2))) +
scale_x_continuous(labels = fancy_scientific) +
my_gg_theme
ggplot(r_tab, aes(x = distance, y = R2)) +
geom_point() +
labs(x = "Distance (bp)", y = expression(paste("R"^2))) +
scale_x_continuous(trans = "log10") +
my_gg_theme
ggplot(r_tab, aes(x = distance, y = R2)) +
geom_point() +
labs(x = "Distance (bp)", y = expression(paste("R"^2))) +
scale_x_continuous(labels = "log10") +
my_gg_theme
ggplot(r_tab, aes(x = distance, y = R2)) +
geom_point() +
labs(x = "Distance (bp)", y = expression(paste("R"^2))) +
scale_x_continuous(breaks = "log10") +
my_gg_theme
ggplot(r_tab, aes(x = distance/1000, y = R2)) +
geom_point() +
labs(x = "Distance (bp)", y = expression(paste("R"^2))) +
#scale_x_continuous(breaks = "log10") +
my_gg_theme
ggplot(r_tab, aes(x = distance/1000, y = R2)) +
geom_point() +
labs(x = "Distance (Kbp)", y = expression(paste("R"^2))) +
#scale_x_continuous(breaks = "log10") +
my_gg_theme
ggplot(r_tab, aes(x = distance/10^6, y = R2)) +
geom_point() +
labs(x = "Distance (Kbp)", y = expression(paste("R"^2))) +
#scale_x_continuous(breaks = "log10") +
my_gg_theme
ggplot(r_tab, aes(x = distance/10^3, y = R2)) +
geom_point() +
labs(x = "Distance (Kbp)", y = expression(paste("R"^2))) +
#scale_x_continuous(breaks = "log10") +
my_gg_theme
#calc mean distance
r_tab_avg <- r_tab_avg %>% mutate(
start=as.integer(str_extract(str_replace_all(distc,"[\\(\\)\\[\\]]",""),"^[0-9-e+.]+")),
end=as.integer(str_extract(str_replace_all(distc,"[\\(\\)\\[\\]]",""),"[0-9-e+.]+$")),
mid=start+((end-start)/2)
)
require(stringr)
#calc mean distance
r_tab_avg <- r_tab_avg %>% mutate(
start=as.integer(str_extract(str_replace_all(distc,"[\\(\\)\\[\\]]",""),"^[0-9-e+.]+")),
end=as.integer(str_extract(str_replace_all(distc,"[\\(\\)\\[\\]]",""),"[0-9-e+.]+$")),
mid=start+((end-start)/2)
)
ggplot(r_tab_avg, aes(x = mid/10^3, y = mean)) +
geom_point() +
geom_line() +
labs(x = "Distance (Kbp)", y = expression(paste("LD r"^2))) +
scale_x_continuous(labels = fancy_scientific) +
my_gg_theme
ggplot(r_tab_avg, aes(x = distance, y = mean, color = CHR_A)) +
geom_point() +
geom_line() +
scale_color_manual(values = c25) +
labs(x = "Distance (Kbp)", y = expression(paste("LD r"^2))) +
scale_x_continuous(labels = fancy_scientific) +
my_gg_theme
ggplot(r_tab_avg, aes(x = mid, y = mean, color = CHR_A)) +
geom_point() +
geom_line() +
scale_color_manual(values = c25) +
labs(x = "Distance (Kbp)", y = expression(paste("LD r"^2))) +
scale_x_continuous(labels = fancy_scientific) +
my_gg_theme
r_tab_avg <- r_tab %>% group_by(distc, CHR_A) %>% summarise(mean=mean(R2),median=median(R2))
head(r_tab_avg)
#calc mean distance
r_tab_avg <- r_tab_avg %>% mutate(
start=as.integer(str_extract(str_replace_all(distc,"[\\(\\)\\[\\]]",""),"^[0-9-e+.]+")),
end=as.integer(str_extract(str_replace_all(distc,"[\\(\\)\\[\\]]",""),"[0-9-e+.]+$")),
mid=start+((end-start)/2)
)
ggplot(r_tab_avg, aes(x = mid, y = mean, color = CHR_A)) +
geom_point() +
geom_line() +
scale_color_manual(values = c25) +
labs(x = "Distance (Kbp)", y = expression(paste("LD r"^2))) +
scale_x_continuous(labels = fancy_scientific) +
my_gg_theme
my_gg_theme
ggplot() +
geom_point(data = r_tab, aes(x = distance/10^3, y = R2)) +
geom_line(data = r_tab_avg, aes(x = mid, y = mean) ) +
my_gg_theme
ggplot() +
geom_point(data = r_tab, aes(x = distance/10^3, y = R2)) +
geom_line(data = r_tab_avg, aes(x = mid/10^3, y = mean) ) +
my_gg_theme
pdf("figures/LD_decay.test.pdf", width = 16, height = 6)
p1
p1 = ggplot(r_tab, aes(x = distance/10^3, y = R2)) +
geom_point() +
labs(x = "Distance (Kbp)", y = expression(paste("LD r"^2))) +
my_gg_theme
p2 = ggplot(r_tab, aes(x = distance/10^3, y = R2, color = CHR_A)) +
geom_point() +
scale_color_manual(values = c25) +
labs(x = "Distance (Kbp)", y = expression(paste("LD r"^2))) +
my_gg_theme
p3 = ggplot(r_tab_avg, aes(x = mid/10^3, y = mean)) +
geom_point() +
geom_line() +
labs(x = "Distance (Kbp)", y = expression(paste("LD r"^2))) +
scale_x_continuous(labels = fancy_scientific) +
my_gg_theme
p4 = ggplot(r_tab_avg, aes(x = mid, y = mean, color = CHR_A)) +
geom_point() +
geom_line() +
scale_color_manual(values = c25) +
labs(x = "Distance (Kbp)", y = expression(paste("LD r"^2))) +
scale_x_continuous(labels = fancy_scientific) +
my_gg_theme
p5 = ggplot() +
geom_point(data = r_tab, aes(x = distance/10^3, y = R2)) +
geom_line(data = r_tab_avg, aes(x = mid/10^3, y = mean) ) +
labs(x = "Distance (Kbp)", y = expression(paste("LD r"^2))) +
my_gg_theme
pdf("figures/LD_decay.test.pdf", width = 16, height = 6)
p1
p2
p3
p4
p5
dev.off()
is.na(r_tab_avg)
r_tab_avg[nrow(r_tab_avg),]
#calculate means
r_tab$distc <- cut(r_tab$distance,breaks=seq(from=min(r_tab$distance)-1,to=max(r_tab$distance)+1,by=1000))
r_tab_avg <- r_tab %>% group_by(distc, CHR_A) %>% summarise(mean=mean(R2),median=median(R2))
r_tab_avg[nrow(r_tab_avg),]
max(r_tab$distance)
seq(from=min(r_tab$distance)-1,to=max(r_tab$distance)+1,by=1000) %>% head
seq(from=min(r_tab$distance)-1,to=max(r_tab$distance)+1,by=1000) %>% tail
seq(from=min(r_tab$distance)-1,to=ceiling(max(r_tab$distance)/1000)*1000 %>% tail
()
bla
seq(from=min(r_tab$distance)-1,to=ceiling(max(r_tab$distance)/1000)*1000) %>% tail
seq(from=min(r_tab$distance)-1,to=ceiling(max(r_tab$distance)/1000)*1000, by=1000) %>% tail
max(r_tab$distance)
ceiling(max(r_tab$distance)/1000)*1000
seq(from=0,to=ceiling(max(r_tab$distance)/1000)*1000,by=1000)) %>% tail
seq(from=0,to=ceiling(max(r_tab$distance)/1000)*1000,by=1000) %>% from
seq(from=0,to=ceiling(max(r_tab$distance)/1000)*1000,by=1000) %>% tail
cut(r_tab$distance,breaks=seq(from=0,to=ceiling(max(r_tab$distance)/1000)*1000,by=1000) ) %>% tail()
#calculate means
r_tab$distc <- cut(r_tab$distance,breaks=seq(from=0,to=ceiling(max(r_tab$distance)/1000)*1000,by=1000) )
r_tab_avg <- r_tab %>% group_by(distc, CHR_A) %>% summarise(mean=mean(R2),median=median(R2))
r_tab_avg[nrow(r_tab_avg),]
#calc mean distance
r_tab_avg <- r_tab_avg %>% mutate(
start=as.integer(str_extract(str_replace_all(distc,"[\\(\\)\\[\\]]",""),"^[0-9-e+.]+")),
end=as.integer(str_extract(str_replace_all(distc,"[\\(\\)\\[\\]]",""),"[0-9-e+.]+$")),
mid=start+((end-start)/2)
)
p1 = ggplot(r_tab, aes(x = distance/10^3, y = R2)) +
geom_point() +
labs(x = "Distance (Kbp)", y = expression(paste("LD r"^2))) +
my_gg_theme
p1
ggplot() +
geom_point(data = r_tab, aes(x = distance/10^3, y = R2)) +
geom_line(data = r_tab_avg, aes(x = mid/10^3, y = mean) ) +
labs(x = "Distance (Kbp)", y = expression(paste("LD (r"^2, ")"))) +
my_gg_theme
p1 = ggplot(r_tab, aes(x = distance/10^3, y = R2)) +
geom_point() +
labs(x = "Distance (Kbp)", y = expression(paste("LD r"^2))) +
my_gg_theme
p2 = ggplot(r_tab, aes(x = distance/10^3, y = R2, color = CHR_A)) +
geom_point() +
scale_color_manual(values = c25) +
labs(x = "Distance (Kbp)", y = expression(paste("LD r"^2))) +
my_gg_theme
p3 = ggplot(r_tab_avg, aes(x = mid/10^3, y = mean)) +
geom_point() +
geom_line() +
labs(x = "Distance (Kbp)", y = expression(paste("LD r"^2))) +
my_gg_theme
p4 = ggplot(r_tab_avg, aes(x = mid, y = mean, color = CHR_A)) +
geom_point() +
geom_line() +
scale_color_manual(values = c25) +
labs(x = "Distance (Kbp)", y = expression(paste("LD r"^2))) +
my_gg_theme
p5 = ggplot() +
geom_point(data = r_tab, aes(x = distance/10^3, y = R2)) +
geom_line(data = r_tab_avg, aes(x = mid/10^3, y = mean) ) +
labs(x = "Distance (Kbp)", y = expression(paste("LD r"^2))) +
my_gg_theme
pdf("figures/LD_decay.test.pdf", width = 16, height = 6)
p1
p2
p3
p4
p5
dev.off()
p1 = ggplot(r_tab, aes(x = distance/10^3, y = R2)) +
geom_point() +
labs(x = "Distance (Kbp)", y = expression(paste("LD r"^2))) +
my_gg_theme
p2 = ggplot(r_tab, aes(x = distance/10^3, y = R2, color = CHR_A)) +
geom_point() +
scale_color_manual(values = c25) +
labs(x = "Distance (Kbp)", y = expression(paste("LD r"^2))) +
my_gg_theme
p3 = ggplot(r_tab_avg, aes(x = mid/10^3, y = mean)) +
geom_point() +
geom_line() +
labs(x = "Distance (Kbp)", y = expression(paste("LD r"^2))) +
my_gg_theme
p4 = ggplot(r_tab_avg, aes(x = mid/10^3, y = mean, color = CHR_A)) +
geom_point() +
geom_line() +
scale_color_manual(values = c25) +
labs(x = "Distance (Kbp)", y = expression(paste("LD r"^2))) +
my_gg_theme
p5 = ggplot() +
geom_point(data = r_tab, aes(x = distance/10^3, y = R2)) +
geom_line(data = r_tab_avg, aes(x = mid/10^3, y = mean) ) +
labs(x = "Distance (Kbp)", y = expression(paste("LD r"^2))) +
my_gg_theme
pdf("figures/LD_decay.test.pdf", width = 16, height = 6)
p1
p2
p3
p4
p5
dev.off()
r_tab = read.table("data/Nf_SPANDx_all_seqs/out.filtered.PASS.DP_filtered.lt25missing.biallele.mac2.rm_NA_ind.LD_decay.ld.test", header = T)
head(r_tab)
require(dplyr)
read.table("data/coverage/Nf_all_seqs/coverage_by_sample.dedup_bam.txt")
cov = read.table("data/coverage/Nf_all_seqs/coverage_by_sample.dedup_bam.txt")
colnames(cov) = c("sample", "avg_cov")
cov$sample = gsub(cov$sample, "NG", "")
?gsub
cov$sample = gsub("NG", "", cov$sample)
cov$sample
cov = read.table("data/coverage/Nf_all_seqs/coverage_by_sample.dedup_bam.txt")
colnames(cov) = c("sample", "avg_cov")
cov$sample
cov$sample = gsub("NG", "", cov$sample)
colnames(cov) = c("sample", "avg_cov")cov$sample
cov$sample
cov = read.table("data/coverage/Nf_all_seqs/coverage_by_sample.dedup_bam.txt")
colnames(cov) = c("sample", "avg_cov")
cov$sample = as.numeric(gsub("NG", "", cov$sample))
cov$sample
cov.2nd_set = cov %>% filter(sample > 100)
cov.2nd_set
cov.2nd_set$avg_cov * 42749761
cov.2nd_set$avg_cov * 42749761 %>% sum
cov.2nd_set$avg_cov * 42749761 %>% sum
sum(cov.2nd_set$avg_cov * 42749761)
sum(cov.2nd_set$avg_cov * 42749761)/10^6
sum(cov.2nd_set$avg_cov * 42749761)/10^9
counts = read.table("data/bbduk_trimmed_counts/bbduk_filtered_read_count_03312022.txt")
counts
sum(counts[1:63])
sum(counts[1:63,])
676363742/(200*10^9)
sum(counts[1:63,])/(800*10^6)
(800*10^6)*500
4e+11/(200*10^9)
sum(counts[1:63,])/(400*10^6) #800*10^6 reads per flow cell, half that per lane
877482948/3495948
(sum(counts[1:63,])/2)/(400*10^6) #800*10^6 reads per flow cell, half that per lane. The number of reads is total so divide by 2 for pairs
(sum(counts[1:63,])/2)
338181871/10^6
338.1819 * 0.001
