#rolling count update
sig_SNP_count := sig_SNP_count + 1
]
lfmm_results.sig$match.type[i] = "in.gene"
lfmm_results.sig$geneID[i] = temp$geneID
lfmm_results.sig$distance[i] = 0
}else{ #if there is no within gene match filter to the nearest gene(s)
#filter to the correct scaffold
temp2 = gff.dt[
contig == lfmm_results.sig$scaffold[i]
]
#calculate distance to genes and return the nearest neighbor(s)
temp2.match = nearest_gene(lfmm_results.sig$position[i], temp2)
#Need to account for possible ties in distance. First look for single match
if(nrow(temp2.match) == 1){
print(nrow(temp2.match))
gff.dt[
geneID == temp2.match$geneID, #conditional filter to gene ID
sig_SNP_count := sig_SNP_count + 1 #update count
]
lfmm_results.sig$match.type[i] = "nearest"
lfmm_results.sig$geneID[i] = temp2.match$geneID
lfmm_results.sig$distance[i] = temp2.match$dist
}else if(nrow(temp2.match) > 0){ #if there are no matches we will update below
print(nrow(temp2.match))
gff.dt[
geneID == temp2.match$geneID, #conditional filter to gene ID
sig_SNP_count := sig_SNP_count + 1 #update count
]
#lfmm_results.sig$match.type[i] = "nearest.multiple"
#lfmm_results.sig$geneID = temp2.match$geneID
#lfmm_results.sig$distance = temp2.match$dist
}else{
lfmm_results.sig$match.type[i] = "no.match"
lfmm_results.sig$geneID[i] = "no.match"
lfmm_results.sig$distance[i] = 0
}
}#end alternative to within gene
}#end for loop
lfmm_results.sig
#import LFMM results
lfmm_results = read.table("data/Nf_LFMM_tables/growing_hdd4_lfmm.txt", header = T)
colnames(lfmm_results)
#filter for SNPs with sig relationship to variable
############
#USE auto ADJUSTED P FOR HDD4
lfmm_results.sig = lfmm_results %>% filter(FDR.sig == "sig") %>% select(scaffold, position)
nrow(lfmm_results.sig)
head(lfmm_results.sig)
#new col in gff table for snp counts
gff$sig_SNP_count = rep(0, nrow(gff))
#new cols in SNP table for whether a gene was found for a snp and type of relationship (no.match, in.gene, nearest), gene id of match, and distance of match (if nearest neighbor)
lfmm_results.sig$match.type = vector(mode = "character", length = nrow(lfmm_results.sig))
lfmm_results.sig$geneID = vector(mode = "character", length = nrow(lfmm_results.sig))
lfmm_results.sig$distance = vector(mode = "numeric", length = nrow(lfmm_results.sig))
#set to data.table to using rolling count update
gff.dt = as.data.table(gff)
#Loop through SNPs
#Need to add gene name matches to SNP table (also deal with case of >1 match)
#Also add matched SNP count to genes
for(i in 1:nrow(lfmm_results.sig)){
#filter for a gene that contains the SNP within start and stop positions
temp = gff.dt[
contig == lfmm_results.sig$scaffold[i] &
start <=  lfmm_results.sig$position[i] &
stop >= lfmm_results.sig$position[i]
]
#check if there is a matching gene. If not go to next
if(nrow(temp) == 1){ #need the if in cases where there is no in-gene match
gff.dt[ #the first lines are dt conditionals
contig == lfmm_results.sig$scaffold[i] &
start <=  lfmm_results.sig$position[i] &
stop >= lfmm_results.sig$position[i],
#rolling count update
sig_SNP_count := sig_SNP_count + 1
]
lfmm_results.sig$match.type[i] = "in.gene"
lfmm_results.sig$geneID[i] = temp$geneID
lfmm_results.sig$distance[i] = 0
}else{ #if there is no within gene match filter to the nearest gene(s)
#filter to the correct scaffold
temp2 = gff.dt[
contig == lfmm_results.sig$scaffold[i]
]
#calculate distance to genes and return the nearest neighbor(s)
temp2.match = nearest_gene(lfmm_results.sig$position[i], temp2)
#Need to account for possible ties in distance. First look for single match
if(nrow(temp2.match) == 1){
print(nrow(temp2.match))
gff.dt[
geneID == temp2.match$geneID, #conditional filter to gene ID
sig_SNP_count := sig_SNP_count + 1 #update count
]
lfmm_results.sig$match.type[i] = "nearest"
lfmm_results.sig$geneID[i] = temp2.match$geneID
lfmm_results.sig$distance[i] = temp2.match$dist
}else if(nrow(temp2.match) > 0){ #if there are no matches we will update below
print(nrow(temp2.match))
gff.dt[
geneID == temp2.match$geneID, #conditional filter to gene ID
sig_SNP_count := sig_SNP_count + 1 #update count
]
#lfmm_results.sig$match.type[i] = "nearest.multiple"
#lfmm_results.sig$geneID = temp2.match$geneID
#lfmm_results.sig$distance = temp2.match$dist
}else{
lfmm_results.sig$match.type[i] = "no.match"
lfmm_results.sig$geneID[i] = "no.match"
lfmm_results.sig$distance[i] = 0
}
}#end alternative to within gene
}#end for loop
lfmm_results.sig$match.type %>% unique
lfmm_results.sig$distance %>% abs %>% mean #4062
lfmm_results.sig$distance %>% abs %>% median #2390
lfmm_results.sig %>% filter(abs(distance) > 0) %>% pull(distance) %>% abs %>% range #19 to 15805
lfmm_results.sig %>% filter(match.type == "in.gene") %>% nrow #34
lfmm_results.sig %>% nrow #34 of 182 in gene
gff.dt %>% filter(sig_SNP_count > 0) #49 genes have SNPs
gff.dt %>% filter(sig_SNP_count > 1) #0 have at least 2 SNPs
nrow(gff.dt)
#######################
#plots of snp distance and SNP accumulation
#######################
require(ggplot2)
p1 = ggplot(lfmm_results.sig, aes(x = distance)) +
geom_histogram(breaks = seq(-15000, 15000, 250)) +
#geom_histogram(breaks = c(-15000,-12500,-10000,-7500,-5000, -2500, -1000, -500,-250, -5, 5, 250, 500, 1000, 2500, 5000, 7500, 10000, 1250, 1500)) +
theme_bw() +
labs(x = "Gene distance from SNP (bp)", y = "Number SNPs (bin width 250 bp)")
p1
p1
pdf("figures/SNP_distance.growing_HDD4.pdf")
p1
dev.off()
p2 = ggplot(
gff.dt %>% filter(sig_SNP_count > 0),
aes(x = sig_SNP_count)
) +
geom_bar() +
labs(x = "SNPs per gene", y = "No. genes") +
theme_bw()
p2
pdf("figures/SNP_per_gene.growing_HDD4.pdf")
p2
dev.off()
ggplot(
gff.dt %>% filter(sig_SNP_count > 0),
aes(x = reorder(geneID, -sig_SNP_count), y = sig_SNP_count)
) +
geom_point() +
labs(x = "Gene", y = "No. SNPs") +
my_gg_theme +
theme(
axis.text.x = element_blank()
)
##############################
#Write results tables
##############################
write.table(gff.dt %>% filter(sig_SNP_count > 0), "data/Nf_LFMM_tables/growing_hdd4.gene_SNP_hits.txt", col.names = T, row.names = F, sep = "\t", quote = F)
write.table(lfmm_results.sig, "data/Nf_LFMM_tables/growing_hhdd4.SNPs.gene_found.nearest_neighbors.txt", col.names = T, row.names = F, sep = "\t", quote = F)
write.table(gff.dt %>% filter(sig_SNP_count > 0) %>% select(geneID), "data/Nf_LFMM_tables/growing_hhdd4.geneIDs.nearest_neighbors.txt", col.names = F, row.names = F, sep = "\t", quote = F)
ggplot(
gff.dt %>% filter(sig_SNP_count > 0),
aes(x = reorder(geneID, -sig_SNP_count), y = sig_SNP_count)
) +
geom_point() +
labs(x = "Gene", y = "No. SNPs") +
my_gg_theme +
theme_bw()
ggplot(
gff.dt %>% filter(sig_SNP_count > 0),
aes(x = reorder(geneID, -sig_SNP_count), y = sig_SNP_count)
) +
geom_point() +
labs(x = "Gene", y = "No. SNPs") +
theme_bw() +
theme(
axis.text.x = element_blank()
)
q(save="no")
require(ggVennDiagram)
require(ggplot2)
#read gene IDs
ppt_genes = read.table("data/Nf_LFMM_tables/ppt.geneIDs.nearest_neighbors.txt")
hdd4_genes = read.table("data/Nf_LFMM_tables/hdd4.geneIDs.nearest_neighbors.txt")
freezeThaw_genes = read.table("data/Nf_LFMM_tables/freezeThaw.geneIDs.nearest_neighbors.txt")
tmin_genes = read.table("data/Nf_LFMM_tables/tmin.geneIDs.nearest_neighbors.txt")
growing_hdd4_genes = read.table("data/Nf_LFMM_tables/growing_hdd4.geneIDs.nearest_neighbors.txt")
growing_hdd4_genes = read.table("data/Nf_LFMM_tables/growing_hhdd4.geneIDs.nearest_neighbors.txt")
growing_hdd4_genes = read.table("data/Nf_LFMM_tables/growing_hdd4.geneIDs.nearest_neighbors.txt")
gene_list = list(
"nongrowing_GDD4" = hdd4_genes$V1,
"growing_GDD4" = growing_hdd4_genes$V1,
"freeze-thaw" =  freezeThaw_genes$V1,
"Tmin" =  tmin_genes$V1,
"MAP" = ppt_genes$V1
)
ggVennDiagram(gene_list) +
scale_fill_gradient(low="blue",high = "red") +
scale_color_manual(values = rep("grey", 3) )
ggVennDiagram(gene_list) +
scale_fill_gradient(low="blue",high = "red") +
scale_color_manual(values = rep("grey", 5) )
pdf("figures/LFMM_genes_venn.5_vars.pdf")
p1
dev.off()
scale_color_manual(values = rep("grey", 35 )
pdf("figures/LFMM_genes_venn.5_vars.pdf")
p1
dev.off()
scale_color_manual(values = rep("grey", 5 )
pdf("figures/LFMM_genes_venn.5_vars.pdf")
p1
dev.off()
scale_color_manual(values = rep("grey", 5 )
p1 = ggVennDiagram(gene_list) +
p1 = ggVennDiagram(gene_list) +
scale_color_manual(values = rep("grey", 5 )
pdf("figures/LFMM_genes_venn.5_vars.pdf")
ggVennDiagram(gene_list) +
scale_fill_gradient(low="blue",high = "red") +
scale_color_manual(values = rep("grey", 5) )
p1 = ggVennDiagram(gene_list) +
scale_fill_gradient(low="blue",high = "red") +
scale_color_manual(values = rep("grey", 5) )
pdf("figures/LFMM_genes_venn.5_vars.pdf")
p1
dev.off()
pdf("figures/LFMM_genes_venn.5_vars.pdf",width = 6)
p1
dev.off()
pdf("figures/LFMM_genes_venn.5_vars.pdf",width = 10, height = 4)
p1
dev.off()
pdf("figures/LFMM_genes_venn.5_vars.pdf")
p1
dev.off()
#nongrowing_GDD, MAP, freeze-thaw
gene_list = list(
"nongrowing_GDD4" = hdd4_genes$V1,
"freeze-thaw" =  freezeThaw_genes$V1,
"MAP" = ppt_genes$V1
)
#
ggVennDiagram(gene_list) +
scale_fill_gradient(low="blue",high = "red") +
scale_color_manual(values = rep("grey", 5) )
p1 = ggVennDiagram(gene_list) +
scale_fill_gradient(low="blue",high = "red") +
scale_color_manual(values = rep("grey", 5) )
#nongrowing_GDD, MAP, freeze-thaw
gene_list = list(
"nongrowing\nGDD4" = hdd4_genes$V1,
"freeze-thaw" =  freezeThaw_genes$V1,
"MAP" = ppt_genes$V1
)
#
ggVennDiagram(gene_list) +
scale_fill_gradient(low="blue",high = "red") +
scale_color_manual(values = rep("grey", 5) )
#5 var Venn
gene_list = list(
"nongrowing\nGDD4" = hdd4_genes$V1,
"growing\nGDD4" = growing_hdd4_genes$V1,
"freeze-thaw" =  freezeThaw_genes$V1,
"Tmin" =  tmin_genes$V1,
"MAP" = ppt_genes$V1
)
ggVennDiagram(gene_list) +
scale_fill_gradient(low="blue",high = "red") +
scale_color_manual(values = rep("grey", 5) )
p1 = ggVennDiagram(gene_list) +
scale_fill_gradient(low="blue",high = "red") +
scale_color_manual(values = rep("grey", 5) )
pdf("figures/LFMM_genes_venn.5_vars.pdf")
p1
dev.off()
#nongrowing_GDD, MAP, freeze-thaw
gene_list = list(
"nongrowing\nGDD4" = hdd4_genes$V1,
"freeze-thaw" =  freezeThaw_genes$V1,
"MAP" = ppt_genes$V1
)
ggVennDiagram(gene_list) +
scale_fill_gradient(low="blue",high = "red") +
scale_color_manual(values = rep("grey", 5) )
p1 = ggVennDiagram(gene_list) +
scale_fill_gradient(low="blue",high = "red") +
scale_color_manual(values = rep("grey", 5) )
pdf("figures/LFMM_genes_venn.nongrowing_hdd4.ppt.freezeThaw.pdf")
p1
dev.off()
################
#temp vars
gene_list = list(
"nongrowing\nGDD4" = hdd4_genes$V1,
"growing\nGDD4" = growing_hdd4_genes$V1,
"freeze-thaw" =  freezeThaw_genes$V1,
"Tmin" =  tmin_genes$V1
)
ggVennDiagram(gene_list) +
scale_fill_gradient(low="blue",high = "red") +
scale_color_manual(values = rep("grey", 5) )
p1 = ggVennDiagram(gene_list) +
scale_fill_gradient(low="blue",high = "red") +
scale_color_manual(values = rep("grey", 5) )
pdf("figures/LFMM_genes_venn.temp_vars.pdf")
p1
dev.off()
ppt_snps = read.table("data/Nf_LFMM_tables/ppt_lfmm.txt", header = T)
head(ppt_snps)
hdd4_snps = read.table("data/Nf_LFMM_tables/hdd4_lfmm.txt", header = T)
growing_hdd4_snps = read.table("data/Nf_LFMM_tables/growing_hdd4_lfmm.txt", header = T)
tmin_snps = read.table("data/Nf_LFMM_tables/tmin_lfmm.txt", header = T)
freezeThaw_snps = read.table("data/Nf_LFMM_tables/freezeThaw_lfmm.txt", header = T)
ppt_snps$FDR.sig %>% unique()
ppt_snps.sig = filter(FDR.sig == "sig") %>% select(scaffold, position)
require(dplyr)
head(ppt_genes)
ppt_snps.sig = filter(FDR.sig == "sig") %>% select(scaffold, position)
ppt_snps.sig = ppt_snps %>% filter(FDR.sig == "sig") %>% select(scaffold, position)
ppt_snps.sig$name = paste(ppt_snps.sig$scaffold, ppt_snps.sig$position, by = "-")
ppt_snps.sig$name %>% head
"head"
paste
?paste
ppt_snps.sig$name = paste(ppt_snps.sig$scaffold, ppt_snps.sig$position, sep = "-")
ppt_snps.sig$name %>% head
hdd4_snps.sig = hdd4_snps %>% filter(FDR.sig == "sig") %>% select(scaffold, position)
hdd4_snps.sig$name = paste(hdd4_snps.sig$scaffold, hdd4_snps.sig$position, sep = "-")
growing_hdd4_snps.sig = growing_hdd4_snps %>% filter(FDR.sig == "sig") %>% select(scaffold, position)
growing_hdd4_snps.sig$name = paste(growing_hdd4_snps.sig$scaffold, growing_hdd4_snps.sig$position, sep = "-")
tmin_snps.sig = tmin_snps %>% filter(FDR.sig == "sig") %>% select(scaffold, position)
tmin_snps.sig$name = paste(tmin_snps.sig$scaffold, tmin_snps.sig$position, sep = "-")
freezeThaw_snps.sig = freezeThawsnps %>% filter(FDR.sig == "sig") %>% select(scaffold, position)
freezeThaw_snps.sig$name = paste(freezeThaw_snps.sig$scaffold, freezeThaw_snps.sig$position, sep = "-")
freezeThaw_snps.sig = freezeThaw_snps %>% filter(FDR.sig == "sig") %>% select(scaffold, position)
freezeThaw_snps.sig$name = paste(freezeThaw_snps.sig$scaffold, freezeThaw_snps.sig$position, sep = "-")
#5 var Venn
snp_list = list(
"nongrowing\nGDD4" = hdd4_snps.sig$name,
"growing\nGDD4" = growing_hdd4_snps.sig$name,
"freeze-thaw" =  freezeThaw_snps.sig$name,
"Tmin" =  tmin_snps.sig$name,
"MAP" = ppt_snps.sig$name
)
ggVennDiagram(gene_list) +
scale_fill_gradient(low="blue",high = "red") +
scale_color_manual(values = rep("grey", 5) )
ggVennDiagram(snp_list) +
scale_fill_gradient(low="blue",high = "red") +
scale_color_manual(values = rep("grey", 5) )
p1 = ggVennDiagram(gene_list) +
scale_fill_gradient(low="blue",high = "red") +
scale_color_manual(values = rep("grey", 5) )
pdf("figures/LFMM_snps_venn.5_vars.pdf")
p1
dev.off()
p1 = ggVennDiagram(snp_list) +
scale_fill_gradient(low="blue",high = "red") +
scale_color_manual(values = rep("grey", 5) )
pdf("figures/LFMM_snps_venn.5_vars.pdf")
p1
dev.off()
#nongrowing_hdd4.tmin.freezeThaw
snp_list = list(
"nongrowing\nGDD4" = hdd4_snps.sig$name,
"freeze-thaw" =  freezeThaw_snps.sig$name,
"MAP" = ppt_snps.sig$name
)
ggVennDiagram(snp_list) +
scale_fill_gradient(low="blue",high = "red") +
scale_color_manual(values = rep("grey", 5) )
p1 = ggVennDiagram(snp_list) +
scale_fill_gradient(low="blue",high = "red") +
scale_color_manual(values = rep("grey", 5) )
pdf("figures/LFMM_snps_venn.nongrowing_hdd4.tmin.freezeThaw.pdf")
p1
dev.off()
p1 = ggVennDiagram(snp_list) +
scale_fill_gradient(low="blue",high = "red") +
scale_color_manual(values = rep("grey", 5) )
pdf("figures/LFMM_snps_venn.nongrowing_hdd4.tmin.freezeThaw.pdf")
p1
dev.off()
#temp vars
snp_list = list(
"nongrowing\nGDD4" = hdd4_snps.sig$name,
"growing\nGDD4" = growing_hdd4_snps.sig$name,
"freeze-thaw" =  freezeThaw_snps.sig$name,
"Tmin" =  tmin_snps.sig$name
)
ggVennDiagram(snp_list) +
scale_fill_gradient(low="blue",high = "red") +
scale_color_manual(values = rep("grey", 5) )
p1 = ggVennDiagram(snp_list) +
scale_fill_gradient(low="blue",high = "red") +
scale_color_manual(values = rep("grey", 5) )
pdf("figures/LFMM_snps_venn.temp_vars.pdf")
p1
dev.off()
q(save="no")
#read env data.
source("R_scripts/make_site_metadata.r")
View(sample_metadata)
site.info = read.csv("data/sample_metadata/site_info.csv")
site.GDD = read.table("data/sample_metadata/site_climate.GDD.txt", header = T)
site.climate = read.table("data/sample_metadata/sites_climate.txt", header = T)
site.GDD$freezeThaw.annual_mean = site.GDD$freezeThaw.mean_growing + site.GDD$freezeThaw.mean_nongrowing
site_metadata = left_join(site.GDD, site.info %>% select(Site, lat, lon, duration_infection), by = "Site") %>%
left_join(., site.climate %>% select(Site, tmin, tmax, ppt, MAT, lat, lon, state.name), by = c("Site", "lat", "lon") )
sample_metadata.site_info = left_join(sample_metadata, site_metadata, by = "state.name")
colnames(sample_metadata.site_info)
sample_metadata.site_info %>% group_by(state.name) %>% unique()
sample_metadata.site_info[-sample]
sample_metadata.site_info[-"sample"]
sample_metadata.site_info %>% select(-sample)
sample_metadata.site_info %>% select(-sample) %>% unique
sample_metadata.site_info %>% select(-sample) %>% distinct()
sample_metadata.site_info.uniq = sample_metadata.site_info %>% select(-sample) %>% distinct()
apply(sample_metadata.site_info.uniq, 2, scale)
?apply(array, margin, ...
)
sample_metadata.site_info.uniq %>%
select(HDD4.mean_growing, HDD4.mean_nongrowing, tmin, ppt, freezeThaw.annual_mean)
apply(
sample_metadata.site_info.uniq %>%
select(HDD4.mean_growing, HDD4.mean_nongrowing, tmin, ppt, freezeThaw.annual_mean),
2,
scale
)
sample_metadata.scaled = apply(
sample_metadata.site_info.uniq %>%
select(HDD4.mean_growing, HDD4.mean_nongrowing, tmin, ppt, freezeThaw.annual_mean),
2,
scale
)
climate.pca = princomp(sample_metadata.scaled)
plot(climate.pca)
biplot(climate.pca)
plot(climate.pca)
str(sample_metadata.scaled)
str(climate.pca)
climate.pca$loadings
climate.pca$scores
climate.pca$variances
climate.pca$scale
climate.pca$center
climate.pca$scale
climate.pca$scores
climate.pca = vegan::rda(sample_metadata.scaled)
str(climate.pca)
climate.pca$eig
plot(climate.pca)
biplot(climate.pca)
climate.pca$eig
climate.pca$u
climate.pca$u
climate.pca$variance
climate.pca
climate.pca[1,1]
climate.pca[1]
climate.pca[2]
climate.pca[3]
climate.pca[4]
climate.pca[5]
climate.pca[6]
climate.pca[7]
climate.pca[8]
scores(climate.pca)
require(vegan)
climate.pca = vegan::rda(sample_metadata.scaled)
str(climate.pca)
climate.pca$variance
scores(climate.pca)
climate.pca$eig
coef(climate.pca)
climate.pca
climate.pca[[1]]
climate.pca[[2]]
climate.pca[[3]]
climate.pca[1]
climate.pca[1][1]
climate.pca$CCA$eig
climate.pca$pCCA$eig
climate.pca = capscale(sample_metadata.scaled, distance = "euclidean")
climate.pca = capscale(sample_metadata.scaled ~ 1, distance = "euclidean")
climate.pca
str(climate.pca)
climate.pca$CA$u
climate.pca$inertia
climate.pca$eig
climate.pca$CA$eig
climate.pca$CA$eig/sum(climate.pca$CA$eig)
plot(climate.pca$CA$eig/sum(climate.pca$CA$eig) )
#First three axes contain majority of var
biplot(climate.pca)
climate.pca = capscale(sample_metadata.s
)
?biplot
biplot.cca
?biplot.cca
biplot(climate.pca, choices = c(1,3))
biplot(climate.pca, choices = c(2,3))
pdf("figures/climate_vars_pca.pdf")
plot(climate.pca$CA$eig/sum(climate.pca$CA$eig) )
biplot(climate.pca)
biplot(climate.pca, choices = c(1,3))
biplot(climate.pca, choices = c(2,3))
dev.off()
q(save="no")
